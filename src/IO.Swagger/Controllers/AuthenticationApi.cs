/*
 * Calculator API
 *
 * An API to perform basic arithmetic operations.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.IdentityModel.Tokens.Jwt;
using System.Text;
using Microsoft.IdentityModel.Tokens;
using System.Security.Claims;
using Microsoft.Extensions.Options;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AuthenticationApiController : ControllerBase
    {

        private readonly JwtSettings _jwtSettings;

        public AuthenticationApiController(IOptions<JwtSettings> jwtSettings)
        {
            _jwtSettings = jwtSettings.Value;
        }


        /// <summary>
        /// Get JWT token- this function create Jwt Token for the calclate api with exp for 20 minutes
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">JWT token</response>
        /// <response code="400">Bad request</response>
        [HttpPost]
        [Route("/token")]
        [ValidateModelState]
        [SwaggerOperation("GetToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "JWT token")]

        public virtual IActionResult GetToken([FromBody]TokenBody body)
        {
            try
            {
                //validate body params
                if(body == null)
                {
                    throw new Exception(" req body can't be null! must contain UserName and Password");
                }
                if(body.Username == null|| body.Username =="")
                {
                    throw new Exception("userName is missing!");

                }
                if (body.Password == null|| body.Password == "")
                {
                    throw new Exception("password is missing!");

                }
                var tokenHandler = new JwtSecurityTokenHandler();
                var key = Encoding.ASCII.GetBytes(_jwtSettings.SecretKey);
                //build the payload of the jwt
                var tokenDescriptor = new SecurityTokenDescriptor
                {
                    Subject = new ClaimsIdentity(new Claim[]
                    {
                new Claim(body.Password, body.Username) // Replace with actual claims as needed
                    }),
                    Expires = DateTime.UtcNow.AddMinutes(_jwtSettings.ExpirationMinutes),
                    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
                };

                var token = tokenHandler.CreateToken(tokenDescriptor);
                var tokenString = tokenHandler.WriteToken(token);
                //return the response - jwt with status 200
                return Ok(new { Token = tokenString });

            }
            catch (Exception ex) {
                //if some exeption is catch - return bad request with status 400.
                return BadRequest(ex.Message);
            }
        }
    }
}
