/*
 * Calculator API
 *
 * An API to perform basic arithmetic operations.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.BuisnessLogic;
using Microsoft.AspNetCore.JsonPatch.Operations;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// this is the main controller of the calculater
    /// </summary>
    [ApiController]
    public class CalculatorApiController : ControllerBase
    {

        private readonly CalculatorService _calculatorService;

        public CalculatorApiController(CalculatorService calculatorService)
        {
            _calculatorService = calculatorService;
        }

        /// <summary>
        /// Perform addition operation on two numerical values
        /// </summary>
        /// <param name="number1"></param>
        /// <param name="number2"></param>
        /// <response code="200">Addition result</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/calculate/add")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddOperation")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculationResponse), description: "Addition result")]
        public virtual IActionResult AddOperation([FromHeader][Required()]int number1, [FromHeader][Required()]int number2)
        {

            try
            {
                //send req to the calculaterService with add operation
                var result = _calculatorService.Execute(number1, number2, "add");
                //return result with status 200
                return Ok(new { result });
            }
            //in case the operation doesnt success - catch the error and send status code of the error
            catch (InvalidOperationException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (DivideByZeroException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An unexpected error occurred: " + ex.Message);
            }

        }

        /// <summary>
        /// Perform division operation on two numerical values
        /// </summary>
        /// <param name="number1"></param>
        /// <param name="number2"></param>
        /// <response code="200">Division result</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/calculate/divide")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DivideOperation")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculationResponse), description: "Division result")]
        public virtual IActionResult DivideOperation([FromHeader][Required()]int  number1, [FromHeader][Required()]int number2)
        {
            try
            {
                //send req to the calculaterService with divide operation
                var result = _calculatorService.Execute(number1, number2, "divide");
                //return result with status 200
                return Ok(new { result });
            }
            //in case the operation doesnt success - catch the error and send status code of the error

            catch (InvalidOperationException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (DivideByZeroException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An unexpected error occurred: " + ex.Message);
            }
        }

        /// <summary>
        /// Perform multiplication operation on two numerical values
        /// </summary>
        /// <param name="number1"></param>
        /// <param name="number2"></param>
        /// <response code="200">Multiplication result</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/calculate/multiply")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MultiplyOperation")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculationResponse), description: "Multiplication result")]
        public virtual IActionResult MultiplyOperation([FromHeader][Required()]int number1, [FromHeader][Required()]int number2)
        {
            try
            {
                //send req to the calculaterService with multiply operation
                var result = _calculatorService.Execute(number1, number2, "multiply");
                //return result with status 200
                return Ok(new { result });
            }
            //in case the operation doesnt success - catch the error and send status code of the error
            catch (InvalidOperationException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (DivideByZeroException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An unexpected error occurred: " + ex.Message);
            }
        }

        /// <summary>
        /// Perform subtraction operation on two numerical values
        /// </summary>
        /// <param name="number1"></param>
        /// <param name="number2"></param>
        /// <response code="200">Subtraction result</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/calculate/subtract")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SubtractOperation")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculationResponse), description: "Subtraction result")]
        public virtual IActionResult SubtractOperation([FromHeader][Required()]int number1, [FromHeader][Required()]int number2)
        {
            try
            {
                //send req to the calculaterService with subtract operation
                var result = _calculatorService.Execute(number1, number2, "subtract");
                //return result with status 200
                return Ok(new { result });
            }
            //in case the operation doesnt success - catch the error and send status code of the error
            catch (InvalidOperationException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (DivideByZeroException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                return StatusCode(500, "An unexpected error occurred: " + ex.Message);
            }

        }
    }
}
